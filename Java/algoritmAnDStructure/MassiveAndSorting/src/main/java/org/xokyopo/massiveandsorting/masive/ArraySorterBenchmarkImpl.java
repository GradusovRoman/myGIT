package org.xokyopo.massiveandsorting.masive;

public interface ArraySorterBenchmarkImpl {
    /*
    Алгоритм:
        1. Находим минимальный элемент в массиве.
        2. Меняем местами минимальный и первый элемент местами.
        3. Опять ищем минимальный элемент в неотсортированной части массива
        4. Меняем местами уже второй элемент массива и минимальный найденный, потому как первый элемент массива является отсортированной частью.
        5. Ищем минимальные значения и меняем местами элементы,пока массив не будет отсортирован до конца.
     */
    int[] benchmarkSelectSort(int[] arr);
    /*
    Алгоритм:
        1.  Каждый элемент массива сравнивается с последующим и если элемент[i] > элемент[i+1] происходит замена.
        Таким образом самые "легкие" элементы "всплывают" - перемещаются к началу списка,а  самые тяжелые "тонут" - перемещаются к концу.
        2.  Повторяем Шаг 1 n-1 раз, где n - Массив.Количество ().
     */
    int[] benchmarkClassicSort(int[] arr);
    /*
    тот что писал я
     */
    int[] benchmarkMargeSort(int[] arr);
    /*
    Суть алгоритма — в сравнивании каждого элемента массива со всеми остальными, которые находятся слева от него.
    Представим, что есть массив, который состоит из 6 элементов: {7,3,4,8,1,5}. Отсортируем его методом вставки.
    Сортировка начинается со второго элемента, так как у первого нет соседей слева.
     */
    int[] benchmarkInsertSort(int[] arr);
    /*
    тот что писал препод
    Наиболее популярный и применяемый алгоритм на практике. Является одним из самых эффективных алгоритмов сортировки данных.
    Вся суть алгоритма сводится к тому, чтобы разбить сложную задачу на маленькие и решить их по отдельности.
    Выбирается некая опорная точка и все значения которые меньше перебрасываются влево, все остальные вправо.
    Далее для каждой полученной части выполняетя тоже самое, до тех пор пока дробить части уже нельзя.
    В конце мы получаем множество отсортированных частей, которые необходимо просто склеить в 1 целое.
     */
    int[] benchmarkQuickSort(int[] arr);
}
